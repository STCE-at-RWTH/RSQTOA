/******************************************************************************
 * @file $MODEL_NAME$_rsqtoa_$LEAF_ID$.hpp
 *
 * @brief This file is generated by the RSQTOA framework. It provides a model
 *        reduction for the '$MODEL_FUNCTION$' function in the header
 *        '$MODEL_INCLUDE$'. This is model $LEAF_ID$/$LEAF_AMOUNT$.
 *
 * @version $VERSION$
 * @author Simon Maertens, STCE (info@stce.rwth-aachen.de)
 * @date $TIMESTAMP$
 ******************************************************************************/

#ifndef $MODEL_NAME_UPPER$_RSQTOA_$LEAF_ID$_HPP_
#define $MODEL_NAME_UPPER$_RSQTOA_$LEAF_ID$_HPP_

// Include model specific types and regressions
#include "$MODEL_NAME$_rsqtoa_types.hpp"
#include "$MODEL_NAME$_rsqtoa_regressions.hpp"

namespace rsqtoa {

/******************************************************************************
 * Reduced model (this is what we want to learn)
 ******************************************************************************/
template<typename T>
static inline T $MODEL_FUNCTION$_reduced_$LEAF_ID$(
  const $MODEL_FUNCTION$_reduced_input_$LEAF_ID$_t<T> &$REDUCED_X$
) {

  // Sample points
  $SAMPLE_POINTS$

  // Input for the original model
  const $MODEL_FUNCTION$_full_input_t<T> x = ($MODEL_FUNCTION$_full_input_t<T>() << 
    $FULL_INPUTS$
  ).finished();

  // Evaluate original model and subtract regressions
  T ret_value = $MODEL_FUNCTION$(x);
  $MODEL_REDUCTION$

  return ret_value;

}

// Reduced model functor
template<typename T>
struct $MODEL_FUNCTION$_reduced_functor_$LEAF_ID$ {
  T operator() (const $MODEL_FUNCTION$_reduced_input_$LEAF_ID$_t<T> &x) const {
    return $MODEL_FUNCTION$_reduced_$LEAF_ID$(x);
  }
};

/******************************************************************************
 * Reassambled model with learned model as additional argument
 ******************************************************************************/
template<typename T, typename REDUCED_MODEL>
static inline T $MODEL_FUNCTION$_reassambled_model_$LEAF_ID$(
  const $MODEL_FUNCTION$_full_input_t<T> &x, const REDUCED_MODEL& f_learned
) {

  T ret_value = T(0.0);

  // Input for the reduced model
  if constexpr ($MODEL_FUNCTION$_reduced_dims_$LEAF_ID$ > 0) {
    const $MODEL_FUNCTION$_reduced_input_$LEAF_ID$_t<T> x_red = ($MODEL_FUNCTION$_reduced_input_$LEAF_ID$_t<T>() << 
      $REDUCED_INPUTS$
    ).finished();

    // Evaluate learned reduced model
    ret_value += f_learned(x_red);
  } else {
    ret_value += f_learned($MODEL_FUNCTION$_reduced_input_$LEAF_ID$_t<T>());
  }

  // Add regressions
  $MODEL_REASSAMBLING_CXX$

  return ret_value;

}

}  // namespace rsqtoa

#endif   // $MODEL_NAME_UPPER$_RSQTOA_$LEAF_ID$_HPP_